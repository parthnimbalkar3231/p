#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>
using namespace std;

const int MAX=1000;
vector<int>graph[MAX];
bool visited[MAX];

void parallelbfs(int start)
{
    queue<int>q;
    q.push(start);
    visited[start]=true;
    cout<<"Parallel BFS";
    
    while(!q.empty())
    {
        int qsize=q.size();
        vector<int>nextLevel;
        
        for(int i=0;i<qsize;i++)
        {
            
            {
            int node;
            node=q.front();
            q.pop();
            cout<<node;
        
        
            for(int j=0;j<graph[node].size();j++)
            {
                int adj=graph[node][j];
                {
                if(!visited[adj]);
                {
                    visited[adj]=true;
                    nextLevel.push_back(adj);
                }
                }
            }
        
        }
        for(int i=0;i<nextLevel.size();i++)
    {
        q.push(nextLevel[i]);
    }
    
    }
    cout<<endl;
    
}
}

int main()
{
    int n,m,start;
    cout<<"enter nodes, edges and start node:";
    cin>>n>>m>>start;
    
    cout<<"enter pairs in graph: ";
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    
    parallelbfs(start);
    
    
}
    
    
    