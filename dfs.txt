
#include <iostream> 
#include <vector> 
#include <omp.h> 
using namespace std; 
const int MAX = 100000; 
vector<int> graph[MAX]; 
bool visited[MAX]; 
void parallelDFS(int node) { 
#pragma omp critical 
{ 
} 
if (visited[node]) return; // Avoid race conditions 
visited[node] = true; 
cout << node << " "; 
#pragma omp parallel for 
for (int i = 0; i < graph[node].size(); i++) { 
int adj_node = graph[node][i]; 
if (!visited[adj_node]) { 
parallelDFS(adj_node);  // Recursive parallel call 
} 
} 
} 
int main() { 
int n, m, start_node; 
cout << "Enter No of Nodes, Edges, and Start Node: "; 
cin >> n >> m >> start_node; 
cout << "Enter Pairs of Edges:\n"; 
for (int i = 0; i < m; i++) { 
int u, v; 
cin >> u >> v; 
graph[u].push_back(v); 
graph[v].push_back(u); // Assuming an undirected graph 
} 
// Initialize visited array 
#pragma omp parallel for 
for (int i = 0; i < n; i++) { 
visited[i] = false; 
} 
cout << "Parallel DFS Traversal: "; 
parallelDFS(start_node); 
cout << endl; 
return 0; 
} 
Output- 
Enter No of Nodes, Edges, and Start Node: 7 6 0 
Enter Pairs of Edges: 
0 1 
0 2 
1 3 
1 4 
2 5 
2 6 
Parallel DFS Traversal: 0 1 3 4 2 5 6
